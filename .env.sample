# 镜像源
CONTAINER_PACKAGE_URL=mirrors.ustc.edu.cn
# 时区
TIMEZONE=Asia/Shanghai
# 数据根目录
DATA_DIR=./data
# 源码根目录
SOURCE_DIR=./www
# 日志根目录
LOG_DIR=./logs

# PHP7.2
PHP72_VERSION=7.2.34
# PHP72 CLI配置
PHP72_PHP_CONF_FILE=./services/php72/php.ini
# PHP72 FPM配置
PHP72_FPM_CONF_FILE=./services/php72/php-fpm.conf
# PHP72日志目录
PHP72_LOG_DIR=${LOG_DIR}/php72
# PHP72模块列表
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,
# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,
# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,
# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,
# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose
PHP72_EXTENSIONS=pdo_mysql,pdo_pgsql,zip,mysqli,mbstring,gd,curl,opcache,bcmath,mbstring,redis,mcrypt,xdebug
# app支持列表:git,openssh
# compose install时, 某些包是通过git方式拉取代码的, 没有git无法安装成功. 如是私有仓库使用ssh方式拉取代码的则需要openssh, 并且需要映射ssh key.
PHP72_INSTALL_APPS=git,openssh
# ssh映射目录, composer私有包使用git@xxx.com则需要将~/.ssh/id_rsa复制到${DATA_DIR}/ssh/目录下。直接映射~/.ssh也可以。没有则请忽略
PHP72_SSH_DIR=${DATA_DIR}/ssh
# php72 composer保存路径
PHP72_COMPOSER_DIR=${DATA_DIR}/composer72

# PHP7.3
PHP73_VERSION=7.3.33
# PHP73 CLI配置
PHP73_PHP_CONF_FILE=./services/php73/php.ini
# PHP73 FPM配置
PHP73_FPM_CONF_FILE=./services/php73/php-fpm.conf
# PHP73日志目录
PHP73_LOG_DIR=${LOG_DIR}/php73
# PHP73模块列表
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,
# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,
# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,
# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,
# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose
PHP73_EXTENSIONS=pdo_mysql,pdo_pgsql,zip,mysqli,mbstring,gd,curl,opcache,bcmath,mbstring,redis,mcrypt,xdebug
# app支持列表:git,openssh
# compose install时, 某些包是通过git方式拉取代码的, 没有git无法安装成功. 如是私有仓库使用ssh方式拉取代码的则需要openssh, 并且需要映射ssh key.
PHP73_INSTALL_APPS=git,openssh
# ssh映射目录, composer私有包使用git@xxx.com则需要将~/.ssh/id_rsa复制到${DATA_DIR}/ssh/目录下。直接映射~/.ssh也可以。没有则请忽略
PHP73_SSH_DIR=${DATA_DIR}/ssh
# php73 composer保存路径
PHP73_COMPOSER_DIR=${DATA_DIR}/composer73

# PHP7.4
PHP74_VERSION=7.4.32
# PHP74 CLI配置
PHP74_PHP_CONF_FILE=./services/php74/php.ini
# PHP74 FPM配置
PHP74_FPM_CONF_FILE=./services/php74/php-fpm.conf
# PHP74日志目录
PHP74_LOG_DIR=${LOG_DIR}/php74
# PHP74模块列表
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,
# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,
# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,
# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,
# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose
PHP74_EXTENSIONS=pdo_mysql,pdo_pgsql,zip,mysqli,mbstring,gd,curl,opcache,bcmath,mbstring,redis,mcrypt,xdebug
# app支持列表:git,openssh
# compose install时, 某些包是通过git方式拉取代码的, 没有git无法安装成功. 如是私有仓库使用ssh方式拉取代码的则需要openssh, 并且需要映射ssh key.
PHP74_INSTALL_APPS=git,openssh
# ssh映射目录, composer私有包使用git@xxx.com则需要将~/.ssh/id_rsa复制到${DATA_DIR}/ssh/目录下。直接映射~/.ssh也可以。没有则请忽略
PHP74_SSH_DIR=${DATA_DIR}/ssh
# php74 composer保存路径
PHP74_COMPOSER_DIR=${DATA_DIR}/composer74

# PHP8.0
PHP80_VERSION=8.0.9
PHP80_PHP_CONF_FILE=./services/php80/php.ini
PHP80_FPM_CONF_FILE=./services/php80/php-fpm.conf
PHP80_LOG_DIR=${LOG_DIR}/php80
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,
# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,
# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,
# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,
# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose
PHP80_EXTENSIONS=pdo_mysql,pdo_pgsql,zip,mysqli,mbstring,gd,curl,opcache,bcmath,mbstring,redis,mcrypt,xdebug
# app支持列表:git,openssh
# compose install时, 某些包是通过git方式拉取代码的, 没有git无法安装成功. 如是私有仓库使用ssh方式拉取代码的则需要openssh, 并且需要映射ssh key.
PHP80_INSTALL_APPS=git,openssh
# ssh映射目录, composer私有包使用git@xxx.com则需要将~/.ssh/id_rsa复制到${DATA_DIR}/ssh/目录下。直接映射~/.ssh也可以。没有则请忽略
PHP80_SSH_DIR=${DATA_DIR}/ssh
# php80 composer保存路径
PHP80_COMPOSER_DIR=${DATA_DIR}/composer80

# PHP8.1
PHP81_VERSION=8.1.17
PHP81_PHP_CONF_FILE=./services/php81/php.ini
PHP81_FPM_CONF_FILE=./services/php81/php-fpm.conf
PHP81_LOG_DIR=${LOG_DIR}/php81
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,
# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,
# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,
# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,
# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose
PHP81_EXTENSIONS=pdo_mysql,pdo_pgsql,zip,mysqli,mbstring,gd,curl,opcache,bcmath,mbstring,redis,mcrypt,xdebug
# app支持列表:git,openssh
# compose install时, 某些包是通过git方式拉取代码的, 没有git无法安装成功. 如是私有仓库使用ssh方式拉取代码的则需要openssh, 并且需要映射ssh key.
PHP81_INSTALL_APPS=git,openssh
# ssh映射目录, composer私有包使用git@xxx.com则需要将~/.ssh/id_rsa复制到${DATA_DIR}/ssh/目录下。直接映射~/.ssh也可以。没有则请忽略
PHP81_SSH_DIR=${DATA_DIR}/ssh
# php81 composer保存路径
PHP81_COMPOSER_DIR=${DATA_DIR}/composer81

# PHP8.2
PHP82_VERSION=8.2.4
PHP82_PHP_CONF_FILE=./services/php82/php.ini
PHP82_FPM_CONF_FILE=./services/php82/php-fpm.conf
PHP82_LOG_DIR=${LOG_DIR}/php82
# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,
# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,
# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,
# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,
# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,
# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,
# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,
# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,
# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose
PHP82_EXTENSIONS=pdo_mysql,pdo_pgsql,zip,mysqli,mbstring,gd,curl,opcache,bcmath,mbstring,redis,mcrypt,xdebug
# app支持列表:git,openssh
# compose install时, 某些包是通过git方式拉取代码的, 没有git无法安装成功. 如是私有仓库使用ssh方式拉取代码的则需要openssh, 并且需要映射ssh key.
PHP82_INSTALL_APPS=git,openssh
# ssh映射目录, composer私有包使用git@xxx.com则需要将~/.ssh/id_rsa复制到${DATA_DIR}/ssh/目录下。直接映射~/.ssh也可以。没有则请忽略
PHP82_SSH_DIR=${DATA_DIR}/ssh
# php82 composer保存路径
PHP82_COMPOSER_DIR=${DATA_DIR}/composer82

# REDIS5配置
REDIS5_VERSION=5.0.13
REDIS5_CONF_FILE=./services/redis5/redis.conf
REDIS5_HOST_PORT=63795

# REDIS6配置
REDIS6_VERSION=6.2.11
REDIS6_CONF_FILE=./services/redis6/redis.conf
REDIS6_HOST_PORT=63796

# REDIS7配置
REDIS7_VERSION=7.2-rc1
REDIS7_CONF_FILE=./services/redis7/redis.conf
REDIS7_HOST_PORT=63797


# MYSQL5配置
MYSQL5_IMAGE=mysql/mysql-server
MYSQL5_VERSION=5.7.28
MYSQL5_HOST_PORT=3309
MYSQL5_ROOT_PASSWORD=123456
MYSQL5_ROOT_HOST=%
MYSQL5_CONF_FILE=./services/mysql5/mysql.cnf
MYSQL5_LOG_DIR=${LOG_DIR}/mysql5
MYSQL5_DATA_DIR=${DATA_DIR}/mysql5

# MYSQL8配置
MYSQL8_VERSION=8.0.28
MYSQL8_HOST_PORT=3307
MYSQL8_ROOT_PASSWORD=123456
MYSQL8_ROOT_HOST=%
MYSQL8_CONF_FILE=./services/mysql8/mysql.cnf
MYSQL8_LOG_DIR=${LOG_DIR}/mysql8
MYSQL8_DATA_DIR=${DATA_DIR}/mysql8

# NGINX配置
NGINX_VERSION=1.23.4-alpine
NGINX_HTTP_HOST_PORT=80
NGINX_HTTPS_HOST_PORT=443
NGINX_CONFD_DIR=./services/nginx/conf.d
NGINX_CONF_FILE=./services/nginx/nginx.conf
NGINX_FASTCGI_PHP_CONF=./services/nginx/fastcgi-php.conf
NGINX_FASTCGI_PARAMS=./services/nginx/fastcgi_params
NGINX_SSL_CERTIFICATE_DIR=./services/nginx/ssl
NGINX_LOG_DIR=${LOG_DIR}/nginx

# MONGODB配置
MONGODB5_VERSION=5.0.15
MONGODB5_HOST_PORT=27017
MONGODB5_INITDB_ROOT_USERNAME=root
MONGODB5_INITDB_ROOT_PASSWORD=123456
MONGODB5_DATA_DIR=${DATA_DIR}/mongo5

# Python3版本
PYTHON3_VERSION=3.11.2

# Rust版本
RUST_VERSION=1.68.2

# Node16版本
NODE16_VERSION=16.20.0

# Node18版本
NODE18_VERSION=18.15.0


# GO版本
GO_VERSION=1.20.2

# Halo博客版本
HALO_VERSION=2.4
# 外部访问地址，请根据实际需要修改
HALO_EXTERNAL_URL=http://localhost:8090/
# 初始化的超级管理员用户名
HALO_USERNAME=admin
# 初始化的超级管理员密码
HALO_PASSWORD=P@88w0rd
# 映射外部端口
HALO_PORT=8090


# memos版本
MEMOS_VERSION=latest
MEMOS_PORT=5230

# frp client version
FRPC_VERSION=0.48.0
# frp client 映射目录,  存放frpc证书和配置文件
FRPC_DIR=${DATA_DIR}/frpc


# frp client version
FRPS_VERSION=0.48.0
# frp client 映射目录,  存放frpc证书和配置文件
FRPS_DIR=${DATA_DIR}/frps

# cronjob: 用于跑定时任务的容器.
# alpine版本
CRONJOB_ALPINE_VERSION=3.16
# 均使用apk安装的, alpine3.16版本会影响app的版本.alpine3.16安装的nodejs=16.20,python3.10,go:1.18
# 支持的软件列表: bash,vim,git,nodejs,python3,rust,go,openssh
CRONJOB_INSTALL_APPS=vim,bash,python3

# nas-tool镜像
NASTOOL_IMAGE=diluka/nas-tools:2.9.1
# nas-tool web端口
NASTOOL_PORT=3000
# nas-tool 配置保存路径
NASTOOL_CONFIG_DIR=${DATA_DIR}/nas-tools/config
# 媒体保存路径
NASTOOL_MEDIA_DIR=${DATA_DIR}/media

# qbittorrent版本
QB_VERSION=4.5.2
QB_WEBUI_PORT=8080
QB_CONFIG_DIR=${DATA_DIR}/qbittorrent/config
QB_DOWNLOAD_DIR=${DATA_DIR}/media

# emby镜像
# EMBY_IMAGE=hczjl/embyserver:4.8
EMBY_IMAGE=linuxserver/emby:latest
# emby配置目录
EMBY_CONFIG_DIR=${DATA_DIR}/emby/config
# 媒体路径 
EMBY_MEDIA_DIR=${DATA_DIR}/media
# http访问端口
EMBY_HTTP_PORT=8096
# https访问端口
EMBY_HTTPS_PORT=8920
# DLNA端口
EMBY_DLNA_PORT=1900
EMBY_NETWORK_DISCOVERY_PORT=7359


# CHATGPT配置
OPENAI_WEBGUI_PORT=3002
# OPENAI_API_KEY 和 OPENAI_ACCESS_TOKEN二选一
OPENAI_API_KEY="sk-rU"
# ACCESS TOKEN
OPENAI_ACCESS_TOKEN=""
# API接口地址，可选，设置 OPENAI_API_KEY 时可用
OPENAI_API_BASE_URL=""
# 模型: gpt-4, gpt-4-0314, gpt-4-32k, gpt-4-32k-0314, gpt-3.5-turbo, gpt-3.5-turbo-0301, text-davinci-003, text-davinci-002, code-davinci-002      
OPENAI_API_MODEL="gpt-3.5-turbo"
# 反向代理, 可选
OPENAI_API_REVERSE_PROXY=""
# 访问权限密钥，可选
OPENAI_AUTH_SECRET_KEY=""
# 每小时最大请求次数，可选，默认无限
OPENAI_MAX_REQUEST_PER_HOUR=0
# 超时，单位毫秒，可选
OPENAI_TIMEOUT_MS=100000
# Socks代理，可选，和 OPENAI_SOCKS_PROXY_PORT 一起时生效
OPENAI_SOCKS_PROXY_HOST=""
OPENAI_SOCKS_PROXY_PORT=""
# HTTPS 代理，可选，支持 http，https，socks5
OPENAI_HTTPS_PROXY=""

#又拍云脚本账号
UPYUN_ACCOUNT="账号&密码;"

# 顺丰速运APP session id
SF_EXPRESS_SESSION_ID=""

# 丘大叔token
Q_TOKEN=""

# JD cookies
JD_COOKIE=""
# JD 日志等级,不需要修改
JD_LOG_LEVEL="info"

# cfdns版本
CFDNS_VERSION=latest
# cfdns日志等级
CFDNS_LOG_LEVEL=info
# cfdns映射端口
CFDNS_PORT=9053
# cfdns配置文件路径
CFDNS_CONF_DIR="${DATA_DIR}/cfdns/conf"

# zzdns
ZZDNS_VERSION="latest"
ZZDNS_LOG_LEVEL="info"
ZZDNS_PORT=53
ZZDNS_CONF_DIR="${DATA_DIR}/zzdns/config"

# free-chatgpt port
FREE_CHATGPT_PORT=8080